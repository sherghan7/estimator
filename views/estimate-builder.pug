extends layout

block content
  section.estimate-builder
    h2.section-title Create New Estimate

    form#estimateForm.estimate-form
      .form-group
        label(for="title") Estimate Title
        input#title(type="text", name="title", required)

      .form-group
        label(for="clientName") Client Name
        input#clientName(type="text", name="clientName", required)

      .form-group
        label(for="description") Project Description
        textarea#description(name="description", rows="3")

      .service-items
        h3.subsection-title Service Items

        .service-item-container#serviceContainer
          .service-item
            .form-row
              .form-group
                label(for="service-0") Service
                select.service-select#service-0(name="services[0][service]", required)
                  option(value="") Select a Service

              .form-group
                label(for="subService-0") Sub-Service
                select.subservice-select#subService-0(name="services[0][subService]", required)
                  option(value="") Select a Sub-Service

            .form-row
              .form-group
                label(for="contributor-0") Contributor
                select.contributor-select#contributor-0(name="services[0][contributor]", required)
                  option(value="") Select a Contributor

              .form-group
                label(for="hours-0") Hours
                input.hours-input#hours-0(type="number", name="services[0][hours]", step="0.5", min="0.5", required)

              .form-group
                label(for="rate-0") Rate ($/hr)
                input.rate-input#rate-0(type="number", name="services[0][rate]", required, readonly)

              .form-group.amount-container
                label Amount
                .amount-display#amount-0 $0.00

            .form-row
              .form-group.note-container
                label(for="note-0") Notes
                textarea.note-input#note-0(name="services[0][note]", rows="2")

              .delete-container
                button.delete-btn(type="button", data-index="0") Remove

        .add-service-container
          button.btn.btn-secondary#addServiceBtn(type="button") + Add Service Item

      .estimate-summary
        h3.subsection-title Estimate Summary
        .summary-table
          .summary-row
            .summary-label Total Hours:
            .summary-value#totalHours 0
          .summary-row
            .summary-label Total Amount:
            .summary-value#totalAmount $0.00

      .form-actions
        button.btn.btn-primary(type="submit") Create Estimate
        button.btn.btn-secondary#previewBtn(type="button") Preview

block scripts
  script.
    document.addEventListener('DOMContentLoaded', () => {
      // Fetch services, subservices, and contributors when page loads
      let services = [];
      let contributors = [];
      let serviceCounter = 1;

      const fetchData = async () => {
        try {
          const servicesResponse = await fetch('/api/services');
          services = await servicesResponse.json();

          const contributorsResponse = await fetch('/api/services/contributors');
          contributors = await contributorsResponse.json();

          // Populate initial dropdowns
          populateServiceDropdown(0);
          populateContributorDropdown(0);

          // Setup event listeners
          setupEventListeners();
        } catch (error) {
          console.error('Error fetching data:', error);
        }
      };

      const populateServiceDropdown = (index) => {
        const serviceSelect = document.getElementById(`service-${index}`);
        serviceSelect.innerHTML = '<option value="">Select a Service</option>';

        services.forEach(service => {
          const option = document.createElement('option');
          option.value = service.id;
          option.textContent = service.name;
          serviceSelect.appendChild(option);
        });
      };

      const populateSubServiceDropdown = (serviceId, index) => {
        const subServiceSelect = document.getElementById(`subService-${index}`);
        subServiceSelect.innerHTML = '<option value="">Select a Sub-Service</option>';

        const service = services.find(s => s.id == serviceId);
        if (service && service.subservices) {
          service.subservices.forEach(subService => {
            const option = document.createElement('option');
            option.value = subService.id;
            option.textContent = subService.name;
            option.dataset.hours = subService.estimatedHours;
            subServiceSelect.appendChild(option);
          });
        }
      };

      const populateContributorDropdown = (index) => {
        const contributorSelect = document.getElementById(`contributor-${index}`);
        contributorSelect.innerHTML = '<option value="">Select a Contributor</option>';

        contributors.forEach(contributor => {
          const option = document.createElement('option');
          option.value = contributor.id;
          option.textContent = `${contributor.name} (${contributor.role})`;
          option.dataset.rate = contributor.hourlyRate;
          contributorSelect.appendChild(option);
        });
      };

      const setupEventListeners = () => {
        // Add service button
        document.getElementById('addServiceBtn').addEventListener('click', addServiceItem);

        // Initial service item event listeners
        setupServiceItemListeners(0);

        // Form submission
        document.getElementById('estimateForm').addEventListener('submit', handleSubmit);
      };

      const setupServiceItemListeners = (index) => {
        // Service dropdown change
        document.getElementById(`service-${index}`).addEventListener('change', (e) => {
          const serviceId = e.target.value;
          if (serviceId) {
            populateSubServiceDropdown(serviceId, index);
          }
        });

        // Contributor dropdown change
        document.getElementById(`contributor-${index}`).addEventListener('change', (e) => {
          const contributorSelect = e.target;
          const option = contributorSelect.options[contributorSelect.selectedIndex];
          if (option && option.dataset.rate) {
            document.getElementById(`rate-${index}`).value = option.dataset.rate;
            updateAmount(index);
          }
        });

        // Hours input change
        document.getElementById(`hours-${index}`).addEventListener('input', () => {
          updateAmount(index);
        });

        // Delete button
        const deleteBtn = document.querySelector(`[data-index="${index}"]`);
        if (deleteBtn) {
          deleteBtn.addEventListener('click', () => {
            removeServiceItem(index);
          });
        }
      };

      const addServiceItem = () => {
        const container = document.getElementById('serviceContainer');
        const index = serviceCounter;

        const template = `
          <div class="service-item" id="item-${index}">
            <div class="form-row">
              <div class="form-group">
                <label for="service-${index}">Service</label>
                <select class="service-select" id="service-${index}" name="services[${index}][service]" required>
                  <option value="">Select a Service</option>
                </select>
              </div>

              <div class="form-group">
                <label for="subService-${index}">Sub-Service</label>
                <select class="subservice-select" id="subService-${index}" name="services[${index}][subService]" required>
                  <option value="">Select a Sub-Service</option>
                </select>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="contributor-${index}">Contributor</label>
                <select class="contributor-select" id="contributor-${index}" name="services[${index}][contributor]" required>
                  <option value="">Select a Contributor</option>
                </select>
              </div>

              <div class="form-group">
                <label for="hours-${index}">Hours</label>
                <input class="hours-input" id="hours-${index}" type="number" name="services[${index}][hours]" step="0.5" min="0.5" required>
              </div>

              <div class="form-group">
                <label for="rate-${index}">Rate ($/hr)</label>
                <input class="rate-input" id="rate-${index}" type="number" name="services[${index}][rate]" required readonly>
              </div>

              <div class="form-group amount-container">
                <label>Amount</label>
                <div class="amount-display" id="amount-${index}">$0.00</div>
              </div>
            </div>

            <div class="form-row">
              <div class="form-group note-container">
                <label for="note-${index}">Notes</label>
                <textarea class="note-input" id="note-${index}" name="services[${index}][note]" rows="2"></textarea>
              </div>

              <div class="delete-container">
                <button class="delete-btn" type="button" data-index="${index}">Remove</button>
              </div>
            </div>
          </div>
        `;

        container.insertAdjacentHTML('beforeend', template);

        // Populate dropdowns for new item
        populateServiceDropdown(index);
        populateContributorDropdown(index);

        // Setup event listeners for new item
        setupServiceItemListeners(index);

        serviceCounter++;
      };

      const removeServiceItem = (index) => {
        const item = document.getElementById(`item-${index}`);
        if (item) {
          item.remove();
          updateTotals();
        }
      };

      const updateAmount = (index) => {
        const hours = parseFloat(document.getElementById(`hours-${index}`).value) || 0;
        const rate = parseFloat(document.getElementById(`rate-${index}`).value) || 0;
        const amount = hours * rate;

        document.getElementById(`amount-${index}`).textContent = `$${amount.toFixed(2)}`;

        updateTotals();
      };

      const updateTotals = () => {
        let totalHours = 0;
        let totalAmount = 0;

        // Loop through all visible service items
        const hoursInputs = document.querySelectorAll('.hours-input');
        const rateInputs = document.querySelectorAll('.rate-input');

        for (let i = 0; i < hoursInputs.length; i++) {
          const hours = parseFloat(hoursInputs[i].value) || 0;
          const rate = parseFloat(rateInputs[i].value) || 0;

          totalHours += hours;
          totalAmount += hours * rate;
        }

        document.getElementById('totalHours').textContent = totalHours.toFixed(1);
        document.getElementById('totalAmount').textContent = `$${totalAmount.toFixed(2)}`;
      };

      const handleSubmit = async (e) => {
        e.preventDefault();

        const formData = new FormData(e.target);
        const estimateData = {
          title: formData.get('title'),
          clientName: formData.get('clientName'),
          description: formData.get('description'),
          items: []
        };

        // Build items array from form data
        const serviceItems = document.querySelectorAll('.service-item');

        serviceItems.forEach((item, index) => {
          const serviceId = document.getElementById(`service-${index}`)?.value;
          const subServiceId = document.getElementById(`subService-${index}`)?.value;
          const contributorId = document.getElementById(`contributor-${index}`)?.value;

          if (serviceId && subServiceId && contributorId) {
            const serviceName = document.querySelector(`#service-${index} option:checked`).textContent;
            const subServiceName = document.querySelector(`#subService-${index} option:checked`).textContent;
            const contributorName = document.querySelector(`#contributor-${index} option:checked`).textContent;
      const hours = parseFloat(document.getElementById(`hours-${index}`).value);
            const rate = parseFloat(document.getElementById(`rate-${index}`).value);
            const note = document.getElementById(`note-${index}`).value;

            estimateData.items.push({
              serviceId,
              service: serviceName,
              subServiceId,
              subService: subServiceName,
              contributorId,
              contributor: contributorName,
              hours,
              rate,
              note
            });
          }
        });

        // Calculate total amount
        estimateData.estimatedTotal = estimateData.items.reduce((total, item) => {
          return total + (item.hours * item.rate);
        }, 0);

        try {
          const response = await fetch('/api/estimates', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(estimateData)
          });

          if (response.ok) {
            const result = await response.json();
            window.location.href = `/estimates/${result.id}`;
          } else {
            throw new Error('Failed to create estimate');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Failed to create estimate. Please try again.');
        }
      };

      // Initialize the page
      fetchData();
    });